@prefix ex: <http://example.org/> .
@prefix shds: <http://www.w3.org/ns/shacl-dataset#>.
@prefix sh: <http://www.w3.org/ns/shacl#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.

@prefix shsh: <http://www.w3.org/ns/shacl-shacl#> .

ex:shapesGraphShape shds:targetGraph shds:all.

ex:shapesGraphShape {

    ex:targetGraphObjectIRIShape
        a sh:NodeShape;
        sh:targetObjectsOf shds:targetGraph;
        sh:nodeKind sh:IRI;
        sh:severity sh:Warning;
    .

    ex:targetGraphCombinationDeclarationShape
        a sh:NodeShape ;
        sh:targetObjectsOf shds:targetGraphCombination ;
        sh:property [
            sh:path [
                sh:zeroOrMorePath ( [sh:alternativePath (shds:or shds:and shds:minus)] [ sh:zeroOrMorePath rdf:rest ] rdf:first );
            ] ;
            sh:node ex:targetGraphCombinationShape;
        ] ;
    .

    ex:oneCombinationOperatorShape
        a sh:PropertyShape;
        sh:path [sh:alternativePath (shds:or shds:and shds:minus)];
        sh:minCount 1 ;
        sh:maxCount 1 ;
    .

    ex:targetGraphCombinationShape
        a sh:NodeShape ;
        sh:or (
            [sh:nodeKind sh:IRI]
            [
                sh:nodeKind sh:BlankNode;
                sh:property [
                    sh:path [sh:alternativePath (shds:or shds:and shds:minus)];
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                ]
            ]
        ) ;

        sh:property [
            sh:path shds:or;
            sh:node shsh:ListShape;
        ];

        sh:property [
            sh:path shds:and;
            sh:node shsh:ListShape;
        ];

        sh:property [
            sh:path shds:minus;
            sh:node ex:ListWithExactly2Members;
        ];

        sh:not [
                sh:path (shds:minus rdf:first ) ;
                sh:minCount 1;
                sh:in ( shds:named shds:all ) ;
        ];

        sh:not [
            sh:path (shds:minus rdf:rest rdf:first ) ;
            sh:minCount 1;
            sh:in ( shds:named shds:all ) ;
        ];

    .


    ex:ListWithExactly2Members
        a sh:NodeShape ;
        sh:node shsh:ListShape ;
        sh:property [
            sh:path [ sh:oneOrMorePath rdf:rest ] ;
            sh:minCount 2 ; 
            sh:maxCount 2 ;
        ] .

    shsh:ListShape
        a sh:NodeShape ;
        rdfs:label "List shape"@en ;
        rdfs:comment "A shape describing well-formed RDF lists. Currently does not check for non-recursion. This could be expressed using SHACL-SPARQL."@en ;
        rdfs:seeAlso <https://www.w3.org/TR/shacl/#syntax-rule-SHACL-list> ;
        sh:property [
            sh:path [ sh:zeroOrMorePath rdf:rest ] ;
            rdfs:comment "Each list member (including this node) must be have the shape shsh:ListNodeShape."@en ;
            sh:hasValue rdf:nil ;
            sh:node shsh:ListNodeShape ;
        ] .

    shsh:ListNodeShape
        a sh:NodeShape ;
        rdfs:label "List node shape"@en ;
        rdfs:comment "Defines constraints on what it means for a node to be a node within a well-formed RDF list. Note that this does not check whether the rdf:rest items are also well-formed lists as this would lead to unsupported recursion."@en ;
        sh:or ( [
                    sh:hasValue rdf:nil ;
                    sh:property [
                        sh:path rdf:first ;
                        sh:maxCount 0 ;
                    ] ;
                    sh:property [
                        sh:path rdf:rest ;
                        sh:maxCount 0 ;
                    ] ;
                ]
                [
                    sh:not [ sh:hasValue rdf:nil ] ;
                    sh:property [
                        sh:path rdf:first ;
                        sh:maxCount 1 ;
                        sh:minCount 1 ;
                    ] ;
                    sh:property [
                        sh:path rdf:rest ;
                        sh:maxCount 1 ;
                        sh:minCount 1 ;
                    ] ;
                ] ) .
}
